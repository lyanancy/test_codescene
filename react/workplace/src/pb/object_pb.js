// source: object.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var enum_pb = require('./enum_pb.js');
goog.object.extend(proto, enum_pb);
goog.exportSymbol('proto.proto.FieldAtkDeck', null, global);
goog.exportSymbol('proto.proto.FieldBastion', null, global);
goog.exportSymbol('proto.proto.FieldCoordinate', null, global);
goog.exportSymbol('proto.proto.FieldDeck', null, global);
goog.exportSymbol('proto.proto.FieldDeckTo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FieldCoordinate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FieldCoordinate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FieldCoordinate.displayName = 'proto.proto.FieldCoordinate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FieldDeck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FieldDeck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FieldDeck.displayName = 'proto.proto.FieldDeck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FieldDeckTo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FieldDeckTo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FieldDeckTo.displayName = 'proto.proto.FieldDeckTo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FieldBastion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FieldBastion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FieldBastion.displayName = 'proto.proto.FieldBastion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FieldAtkDeck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FieldAtkDeck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FieldAtkDeck.displayName = 'proto.proto.FieldAtkDeck';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FieldCoordinate.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FieldCoordinate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FieldCoordinate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldCoordinate.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FieldCoordinate}
 */
proto.proto.FieldCoordinate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FieldCoordinate;
  return proto.proto.FieldCoordinate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FieldCoordinate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FieldCoordinate}
 */
proto.proto.FieldCoordinate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FieldCoordinate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FieldCoordinate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FieldCoordinate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldCoordinate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.proto.FieldCoordinate.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldCoordinate} returns this
 */
proto.proto.FieldCoordinate.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.proto.FieldCoordinate.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldCoordinate} returns this
 */
proto.proto.FieldCoordinate.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FieldDeck.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FieldDeck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FieldDeck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldDeck.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deckNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    coordinate: (f = msg.getCoordinate()) && proto.proto.FieldCoordinate.toObject(includeInstance, f),
    deckStatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FieldDeck}
 */
proto.proto.FieldDeck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FieldDeck;
  return proto.proto.FieldDeck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FieldDeck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FieldDeck}
 */
proto.proto.FieldDeck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckNo(value);
      break;
    case 3:
      var value = new proto.proto.FieldCoordinate;
      reader.readMessage(value,proto.proto.FieldCoordinate.deserializeBinaryFromReader);
      msg.setCoordinate(value);
      break;
    case 4:
      var value = /** @type {!proto.proto.EnumDeckStatus} */ (reader.readEnum());
      msg.setDeckStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FieldDeck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FieldDeck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FieldDeck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldDeck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDeckNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCoordinate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.FieldCoordinate.serializeBinaryToWriter
    );
  }
  f = message.getDeckStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 user_id = 1;
 * @return {number}
 */
proto.proto.FieldDeck.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldDeck} returns this
 */
proto.proto.FieldDeck.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 deck_no = 2;
 * @return {number}
 */
proto.proto.FieldDeck.prototype.getDeckNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldDeck} returns this
 */
proto.proto.FieldDeck.prototype.setDeckNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional FieldCoordinate coordinate = 3;
 * @return {?proto.proto.FieldCoordinate}
 */
proto.proto.FieldDeck.prototype.getCoordinate = function() {
  return /** @type{?proto.proto.FieldCoordinate} */ (
    jspb.Message.getWrapperField(this, proto.proto.FieldCoordinate, 3));
};


/**
 * @param {?proto.proto.FieldCoordinate|undefined} value
 * @return {!proto.proto.FieldDeck} returns this
*/
proto.proto.FieldDeck.prototype.setCoordinate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldDeck} returns this
 */
proto.proto.FieldDeck.prototype.clearCoordinate = function() {
  return this.setCoordinate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldDeck.prototype.hasCoordinate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EnumDeckStatus deck_status = 4;
 * @return {!proto.proto.EnumDeckStatus}
 */
proto.proto.FieldDeck.prototype.getDeckStatus = function() {
  return /** @type {!proto.proto.EnumDeckStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.proto.EnumDeckStatus} value
 * @return {!proto.proto.FieldDeck} returns this
 */
proto.proto.FieldDeck.prototype.setDeckStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 hp = 5;
 * @return {number}
 */
proto.proto.FieldDeck.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldDeck} returns this
 */
proto.proto.FieldDeck.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FieldDeckTo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FieldDeckTo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FieldDeckTo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldDeckTo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deckNo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    coordinate: (f = msg.getCoordinate()) && proto.proto.FieldCoordinate.toObject(includeInstance, f),
    deckStatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FieldDeckTo}
 */
proto.proto.FieldDeckTo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FieldDeckTo;
  return proto.proto.FieldDeckTo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FieldDeckTo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FieldDeckTo}
 */
proto.proto.FieldDeckTo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckNo(value);
      break;
    case 3:
      var value = new proto.proto.FieldCoordinate;
      reader.readMessage(value,proto.proto.FieldCoordinate.deserializeBinaryFromReader);
      msg.setCoordinate(value);
      break;
    case 4:
      var value = /** @type {!proto.proto.EnumDeckStatus} */ (reader.readEnum());
      msg.setDeckStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FieldDeckTo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FieldDeckTo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FieldDeckTo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldDeckTo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDeckNo();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCoordinate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.FieldCoordinate.serializeBinaryToWriter
    );
  }
  f = message.getDeckStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 user_id = 1;
 * @return {number}
 */
proto.proto.FieldDeckTo.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldDeckTo} returns this
 */
proto.proto.FieldDeckTo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 deck_no = 2;
 * @return {number}
 */
proto.proto.FieldDeckTo.prototype.getDeckNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldDeckTo} returns this
 */
proto.proto.FieldDeckTo.prototype.setDeckNo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional FieldCoordinate coordinate = 3;
 * @return {?proto.proto.FieldCoordinate}
 */
proto.proto.FieldDeckTo.prototype.getCoordinate = function() {
  return /** @type{?proto.proto.FieldCoordinate} */ (
    jspb.Message.getWrapperField(this, proto.proto.FieldCoordinate, 3));
};


/**
 * @param {?proto.proto.FieldCoordinate|undefined} value
 * @return {!proto.proto.FieldDeckTo} returns this
*/
proto.proto.FieldDeckTo.prototype.setCoordinate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldDeckTo} returns this
 */
proto.proto.FieldDeckTo.prototype.clearCoordinate = function() {
  return this.setCoordinate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldDeckTo.prototype.hasCoordinate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EnumDeckStatus deck_status = 4;
 * @return {!proto.proto.EnumDeckStatus}
 */
proto.proto.FieldDeckTo.prototype.getDeckStatus = function() {
  return /** @type {!proto.proto.EnumDeckStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.proto.EnumDeckStatus} value
 * @return {!proto.proto.FieldDeckTo} returns this
 */
proto.proto.FieldDeckTo.prototype.setDeckStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 hp = 5;
 * @return {number}
 */
proto.proto.FieldDeckTo.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldDeckTo} returns this
 */
proto.proto.FieldDeckTo.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FieldBastion.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FieldBastion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FieldBastion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldBastion.toObject = function(includeInstance, msg) {
  var f, obj = {
    bastionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bastionName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    allianceId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    coordinate: (f = msg.getCoordinate()) && proto.proto.FieldCoordinate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FieldBastion}
 */
proto.proto.FieldBastion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FieldBastion;
  return proto.proto.FieldBastion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FieldBastion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FieldBastion}
 */
proto.proto.FieldBastion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBastionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBastionName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAllianceId(value);
      break;
    case 4:
      var value = new proto.proto.FieldCoordinate;
      reader.readMessage(value,proto.proto.FieldCoordinate.deserializeBinaryFromReader);
      msg.setCoordinate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FieldBastion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FieldBastion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FieldBastion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldBastion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBastionId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBastionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAllianceId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCoordinate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.FieldCoordinate.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 bastion_id = 1;
 * @return {number}
 */
proto.proto.FieldBastion.prototype.getBastionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldBastion} returns this
 */
proto.proto.FieldBastion.prototype.setBastionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string bastion_name = 2;
 * @return {string}
 */
proto.proto.FieldBastion.prototype.getBastionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FieldBastion} returns this
 */
proto.proto.FieldBastion.prototype.setBastionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 alliance_id = 3;
 * @return {number}
 */
proto.proto.FieldBastion.prototype.getAllianceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldBastion} returns this
 */
proto.proto.FieldBastion.prototype.setAllianceId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional FieldCoordinate coordinate = 4;
 * @return {?proto.proto.FieldCoordinate}
 */
proto.proto.FieldBastion.prototype.getCoordinate = function() {
  return /** @type{?proto.proto.FieldCoordinate} */ (
    jspb.Message.getWrapperField(this, proto.proto.FieldCoordinate, 4));
};


/**
 * @param {?proto.proto.FieldCoordinate|undefined} value
 * @return {!proto.proto.FieldBastion} returns this
*/
proto.proto.FieldBastion.prototype.setCoordinate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldBastion} returns this
 */
proto.proto.FieldBastion.prototype.clearCoordinate = function() {
  return this.setCoordinate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldBastion.prototype.hasCoordinate = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FieldAtkDeck.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FieldAtkDeck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FieldAtkDeck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldAtkDeck.toObject = function(includeInstance, msg) {
  var f, obj = {
    atkDeck: (f = msg.getAtkDeck()) && proto.proto.FieldDeck.toObject(includeInstance, f),
    defDeck: (f = msg.getDefDeck()) && proto.proto.FieldDeck.toObject(includeInstance, f),
    damage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    defeat: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FieldAtkDeck}
 */
proto.proto.FieldAtkDeck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FieldAtkDeck;
  return proto.proto.FieldAtkDeck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FieldAtkDeck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FieldAtkDeck}
 */
proto.proto.FieldAtkDeck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FieldDeck;
      reader.readMessage(value,proto.proto.FieldDeck.deserializeBinaryFromReader);
      msg.setAtkDeck(value);
      break;
    case 2:
      var value = new proto.proto.FieldDeck;
      reader.readMessage(value,proto.proto.FieldDeck.deserializeBinaryFromReader);
      msg.setDefDeck(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDamage(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FieldAtkDeck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FieldAtkDeck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FieldAtkDeck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FieldAtkDeck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAtkDeck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FieldDeck.serializeBinaryToWriter
    );
  }
  f = message.getDefDeck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FieldDeck.serializeBinaryToWriter
    );
  }
  f = message.getDamage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDefeat();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional FieldDeck atk_deck = 1;
 * @return {?proto.proto.FieldDeck}
 */
proto.proto.FieldAtkDeck.prototype.getAtkDeck = function() {
  return /** @type{?proto.proto.FieldDeck} */ (
    jspb.Message.getWrapperField(this, proto.proto.FieldDeck, 1));
};


/**
 * @param {?proto.proto.FieldDeck|undefined} value
 * @return {!proto.proto.FieldAtkDeck} returns this
*/
proto.proto.FieldAtkDeck.prototype.setAtkDeck = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldAtkDeck} returns this
 */
proto.proto.FieldAtkDeck.prototype.clearAtkDeck = function() {
  return this.setAtkDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldAtkDeck.prototype.hasAtkDeck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FieldDeck def_deck = 2;
 * @return {?proto.proto.FieldDeck}
 */
proto.proto.FieldAtkDeck.prototype.getDefDeck = function() {
  return /** @type{?proto.proto.FieldDeck} */ (
    jspb.Message.getWrapperField(this, proto.proto.FieldDeck, 2));
};


/**
 * @param {?proto.proto.FieldDeck|undefined} value
 * @return {!proto.proto.FieldAtkDeck} returns this
*/
proto.proto.FieldAtkDeck.prototype.setDefDeck = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FieldAtkDeck} returns this
 */
proto.proto.FieldAtkDeck.prototype.clearDefDeck = function() {
  return this.setDefDeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FieldAtkDeck.prototype.hasDefDeck = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 damage = 3;
 * @return {number}
 */
proto.proto.FieldAtkDeck.prototype.getDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FieldAtkDeck} returns this
 */
proto.proto.FieldAtkDeck.prototype.setDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool defeat = 4;
 * @return {boolean}
 */
proto.proto.FieldAtkDeck.prototype.getDefeat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.FieldAtkDeck} returns this
 */
proto.proto.FieldAtkDeck.prototype.setDefeat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


goog.object.extend(exports, proto.proto);
